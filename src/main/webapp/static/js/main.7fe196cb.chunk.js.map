{"version":3,"sources":["components/PromptInput/PromptInput.js","components/UserPrompt/UserPrompt.js","containers/Login/Login.js","containers/SignUp/SignUp.js","containers/Users/Users.js","containers/Chat/Chat.js","components/Result/Result.js","containers/App.js","index.js"],"names":["promptInput","props","autoFocus","className","name","onChange","onUserPromptInputChange","onKeyPress","e","key","onEnterPressed","value","command","userPrompt","prevCommand","type","firstname","lastname","PromptInput","Login","state","resp","axios","post","email","this","split","password","then","res","data","userExist","onLogin","uid","setState","catch","err","console","log","Component","SignUp","userCreated","Users","users","get","length","map","user","id","firstName","lastName","Chat","chats","message","isChatting","chatInputChangeHandler","target","enterKeyPressedHandler","clearInterval","syncChat","senderId","receiverId","params","receiverMessages","filter","chat","sort","chat1","chat2","error","senderRes","receiverRes","setInterval","senderMessages","result","App","promptHierarchy","logs","isAuthenticated","inputChangeHandler","loginHandler","enterPressedHandler","newLog","UserPrompt","Result","prevState","logsEnd","scrollIntoView","behavior","Log","index","waitingForInput","ref","e1","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7fe196cb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst promptInput = props => {\r\n  return (\r\n    <input \r\n      autoFocus={true}\r\n      className={props.className || \"inputPrompt\"}\r\n      name=\"command\"\r\n      onChange={props.onUserPromptInputChange}\r\n      onKeyPress={e => (e.key === 'Enter') ? props.onEnterPressed() : null}\r\n      value={props.command}\r\n    />\r\n  );\r\n}\r\n\r\nexport default promptInput;","import React from 'react';\r\n\r\nimport PromptInput from '../PromptInput/PromptInput';\r\n\r\nconst userPrompt = props => {\r\n  let prevCommand = null;\r\n  if (props.type === \"log\") {\r\n    prevCommand = <span className=\"inputPrompt\">{props.command}</span>\r\n  }\r\n\r\n  return (\r\n    <p className=\"userPrompt\">\r\n      <span className=\"greenText\">{props.firstname + (props.lastname !== '' ? '-' : '') + props.lastname}</span>\r\n      @<span className=\"pinkText\">secureChat</span>\r\n      <span className=\"lightblueText\">$</span>\r\n\r\n      {props.type !== \"log\" ? <PromptInput {...props} /> : null}\r\n      {prevCommand}\r\n    </p>\r\n  );\r\n}\r\n\r\nexport default userPrompt;","import React, { Component, Fragment } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    resp: ''\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .post('http://localhost:8080/secure-chat-java/login', {\r\n        email: this.props.command.split(' ')[1],\r\n        password: this.props.command.split(' ')[2]\r\n      })\r\n      .then(res => {\r\n        if (res.data.userExist) {\r\n          this.props.onLogin(res.data.firstname, res.data.lastname, res.data.uid);\r\n          this.setState({ resp: 'Login successful' });\r\n        } else {\r\n          this.setState({ resp: 'Invalid username or password' });\r\n        }\r\n      }).catch(err => {\r\n        console.log(err);\r\n        this.setState({ resp: 'Something went wrong.' });\r\n      });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <Fragment>\r\n        <p>Authenticating...</p>\r\n        <p>{this.state.resp}</p>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component, Fragment } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass SignUp extends Component {\r\n  state = {\r\n    resp: ''\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .post('http://localhost:8080/secure-chat-java/signup', {\r\n        firstname: this.props.command.split(' ')[1],\r\n        lastname: this.props.command.split(' ')[2],\r\n        email: this.props.command.split(' ')[3],\r\n        password: this.props.command.split(' ')[4]\r\n      })\r\n      .then(res => {\r\n        if (res.data.userCreated) {\r\n          this.setState({ resp: 'User Created' });\r\n        } else {\r\n          this.setState({ resp: 'Invalid Inputs' });\r\n        }\r\n      }).catch(err => {\r\n        console.log(err);\r\n        this.setState({ resp: 'Something went wrong' });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <p>Creating your account...</p>\r\n        <p>{this.state.resp}</p>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignUp;\r\n","import React, { Component, Fragment } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Users extends Component {\r\n  state = {\r\n    resp: '',\r\n    users: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get('http://localhost:8080/secure-chat-java/users')\r\n      .then(res => {\r\n        this.setState({ users: res.data });\r\n      }).catch(err => {\r\n        console.log(err);\r\n        this.setState({ resp: 'Something went wrong.' });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    let users = null;\r\n    if (this.state.users !== []) {\r\n      users = \r\n        <div>\r\n          <br />\r\n          <p>{this.state.users.length} users found:</p>\r\n          {this.state.users.map(user => <p key={user.id}>{user.firstName + '-' + user.lastName + ' ' + user.id}</p>)}\r\n        </div>;\r\n    }\r\n\r\n    return(\r\n      <Fragment>\r\n        <p>Fetching users...</p>\r\n        {users}\r\n        {this.state.resp}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Users;\r\n","import React, { Component, Fragment } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport PromptInput from '../../components/PromptInput/PromptInput';\r\n\r\nclass Chat extends Component {\r\n  state = {\r\n    resp: '',\r\n    chats: [],\r\n    message: '',\r\n    isChatting: true\r\n  }\r\n\r\n  chatInputChangeHandler = e => {\r\n    const message = e.target.value;\r\n    this.setState({ message: message });\r\n  }\r\n\r\n  enterKeyPressedHandler = () => {\r\n    if (this.state.message === 'exit') {\r\n      clearInterval(this.syncChat);\r\n      this.setState({ isChatting: false });\r\n      return;\r\n    }\r\n    // First post the message to store into database.\r\n    axios\r\n      .post('http://localhost:8080/secure-chat-java/chat', {\r\n        senderId: this.props.uid,\r\n        receiverId: this.props.command.split(' ')[1],\r\n        message: this.state.message\r\n      })\r\n      .then(res => {\r\n        // Then get all to messages from chats table.\r\n        // We could also get only last message, but it won't include message id.\r\n        axios\r\n          .get('http://localhost:8080/secure-chat-java/chat', {\r\n            params: {\r\n              senderId: this.props.uid,\r\n              receiverId: this.props.command.split(' ')[1]\r\n            }\r\n          })\r\n          .then(resp => {\r\n            const receiverMessages = this.state.chats.filter(chat => chat.senderId !== this.props.uid);\r\n            const chats = [...resp.data, ...receiverMessages];\r\n            chats.sort((chat1, chat2) => chat1.id > chat2.id ? 1 : -1);\r\n            this.setState({ chats: chats, message: '' });\r\n          })\r\n          .catch(error => {\r\n            console.log(error);\r\n          });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    // First fetch messages of sender.\r\n    axios\r\n      .get('http://localhost:8080/secure-chat-java/chat', {\r\n        params: {\r\n          senderId: this.props.uid,\r\n          receiverId: this.props.command.split(' ')[1]\r\n        }\r\n      })\r\n      .then(senderRes => {\r\n        // Then fetch messages of receiver.\r\n        axios\r\n          .get('http://localhost:8080/secure-chat-java/chat', {\r\n            params: {\r\n              senderId: this.props.command.split(' ')[1],\r\n              receiverId: this.props.uid\r\n            }\r\n          })\r\n          .then(receiverRes => {\r\n            const chats = [...senderRes.data, ...receiverRes.data];\r\n            chats.sort((chat1, chat2) => chat1.id > chat2.id ? 1 : -1);\r\n            this.setState({ chats: chats });\r\n          })\r\n          .catch(err => {\r\n            this.setState({ resp: 'Something went wrong' });\r\n          });\r\n      })\r\n      .catch(err => {\r\n        this.setState({ resp: 'Something went wrong' });\r\n      });\r\n\r\n    // Check if new chat arrives from receiver\r\n    this.syncChat = setInterval(() => {\r\n      axios\r\n        .get('http://localhost:8080/secure-chat-java/chat', {\r\n          params: {\r\n            senderId: this.props.command.split(' ')[1],\r\n            receiverId: this.props.uid\r\n          }\r\n        })\r\n        .then(res => {\r\n          console.log(res.data);\r\n          const receiverMessages = this.state.chats.filter(chat => chat.senderId !== this.props.uid);\r\n          if (res.data.length !== receiverMessages.length) {\r\n            // New message has arrived\r\n            const senderMessages = this.state.chats.filter(chat => chat.senderId === this.props.uid);\r\n            const chats = [...senderMessages, ...res.data];\r\n            chats.sort((chat1, chat2) => chat1.id > chat2.id ? 1 : -1);\r\n            this.setState({ chats: chats });\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        });\r\n    }, 3000);\r\n  }\r\n\r\n  render() {\r\n    if (this.props.uid === -1) {\r\n      return <p>Please Login</p>\r\n    }\r\n    let chats = null;\r\n    if (this.state.chats !== []) {\r\n      chats = this.state.chats.map(chat => {\r\n        if (chat.senderId === this.props.uid) {\r\n          return (\r\n            <div className=\"chatMessageLeft\" key={chat.id}>\r\n              <div>{'>>>'}</div>\r\n              <p>{chat.message}</p>\r\n            </div>\r\n          );\r\n        } else {\r\n          return (\r\n            <div className=\"chatMessageRight\" key={chat.id}>\r\n              <p>{chat.message}</p>\r\n              <div>{'<<<'}</div>\r\n            </div>\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <p>Fetching chats...</p>\r\n        <p>{this.state.resp}</p>\r\n        <div className=\"chatbox\">\r\n          {chats}\r\n          <div className=\"chatMessageLeft\">\r\n            {this.state.isChatting \r\n            ? <Fragment>\r\n                <div>{'>>>'}</div>\r\n                <PromptInput \r\n                  className=\"chatPrompt\" \r\n                  onUserPromptInputChange={this.chatInputChangeHandler}\r\n                  onEnterPressed={this.enterKeyPressedHandler}\r\n                  command={this.state.message}\r\n                />\r\n              </Fragment>\r\n            : null}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chat;\r\n","import React from 'react';\r\n\r\nimport Login from '../../containers/Login/Login';\r\nimport SignUp from '../../containers/SignUp/SignUp';\r\nimport Users from '../../containers/Users/Users';\r\nimport Chat from '../../containers/Chat/Chat';\r\n\r\nconst result = props => {\r\n  switch(props.command.split(' ')[0]) {\r\n    case 'login':\r\n      return <Login {...props} />;\r\n    case 'signup':\r\n      return <SignUp {...props} />;\r\n    case 'users':\r\n      return <Users />;\r\n    case 'chat':\r\n      return <Chat {...props} />;\r\n    default:\r\n      return <p>Invalid command</p>;\r\n  }\r\n}\r\n\r\nexport default result;\r\n","import React, { Component, Fragment } from 'react';\n\nimport UserPrompt from '../components/UserPrompt/UserPrompt';\nimport Result from '../components/Result/Result';\n\nclass App extends Component {\n\n  state = {\n    firstname: 'guest',\n    lastname: '',\n    uid: -1,\n    email: '',\n    command: '',\n    promptHierarchy: [],\n    result: '',\n    logs: [],\n    isAuthenticated: false\n  }\n\n  inputChangeHandler = e => {\n    const value = e.target.value;\n    this.setState({ [e.target.name]: value });\n  }\n\n  loginHandler = (firstname, lastname, uid) => {\n    if (!this.state.isAuthenticated) {\n      this.setState({ \n        isAuthenticated: true, \n        firstname: firstname, \n        lastname: lastname,\n        uid: uid\n      });\n    }\n  }\n\n  enterPressedHandler = () => {\n    const firstname = this.state.firstname;\n    const lastname = this.state.lastname;\n    const command = this.state.command;\n    const uid = this.state.uid;\n\n    let newLog = () => (\n      <Fragment>\n        <UserPrompt \n          firstname={firstname}\n          lastname={lastname} \n          command={command}\n          type=\"log\"\n        />\n        {command !== '' \n          ? <Result \n              command={command} \n              onLogin={this.loginHandler}\n              uid={uid}\n            /> \n          : null\n        }\n      </Fragment>\n    );\n    this.setState(prevState => ({\n      logs: [...prevState.logs, newLog],\n      command: ''\n    }));\n  }\n\n  componentDidUpdate() {\n    this.logsEnd.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  render () {\n    let logs = null;\n    if (this.state.logs !== []) {\n      logs = this.state.logs.map((Log, index) => (\n        <Log key={index} />\n      ));\n    }\n\n    return (\n      <div className=\"App\">\n        {logs}\n        {this.state.waitingForInput ? null : \n          <UserPrompt \n            firstname={this.state.firstname} \n            lastname={this.state.lastname} \n            command={this.state.command}\n            onUserPromptInputChange={this.inputChangeHandler}\n            onEnterPressed={this.enterPressedHandler}\n          />\n        }\n        <div ref={e1 => this.logsEnd = e1}></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}